// backend/controllers/orderController.js
import orderModel from "../models/orderModels.js";
import userModel from "../models/userModels.js";
import foodModel from "../models/foodModels.js";
import Stripe from "stripe";

// --- ENV checks ---
if (!process.env.STRIPE_SECRET_KEY) {
  console.error("‚ùå STRIPE_SECRET_KEY is missing. Set it in your environment.");
  process.exit(1);
}
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const FRONTEND_URL = process.env.FRONTEND_URL || "http://localhost:5173";

// helpers
const asString = (v) => (typeof v === "string" ? v.trim() : String(v || "").trim());
const isTrue = (v) => v === true || v === "true" || v === 1 || v === "1";

/**
 * POST /api/order/place
 * req.userId c√≥ t·ª´ authMiddleware (ƒë·ªçc Authorization: Bearer <token> ho·∫∑c header 'token')
 */
export const placeOrder = async (req, res) => {
  try {
    const userId = req.userId;
    const { items, amount: clientAmount, address } = req.body;

    // ---- guard basic ----
    if (!userId) {
      return res.status(401).json({ success: false, message: "Unauthorized" });
    }
    if (!Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ success: false, message: "Gi·ªè h√†ng r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá." });
    }
    if (!address) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin ƒë·ªãa ch·ªâ." });
    }

    // ---- normalize address: ch·ªâ gi·ªØ c√°c tr∆∞·ªùng c·∫ßn, kh√¥ng b·∫Øt bu·ªôc country/state/postalCode ----
    const cleanAddress = {
      firstName: asString(address.firstName),
      lastName: asString(address.lastName),
      email: asString(address.email),
      street: asString(address.street),
      city: asString(address.city),
      state: asString(address.state || ""),         // optional
      postalCode: asString(address.postalCode || ""), // optional
      country: asString(address.country || ""),       // optional
      phone: asString(address.phone),
    };

    // ki·ªÉm tra t·ªëi thi·ªÉu
    for (const key of ["firstName", "lastName", "email", "street", "city", "phone"]) {
      if (!cleanAddress[key]) {
        return res.status(400).json({ success: false, message: `Thi·∫øu tr∆∞·ªùng ƒë·ªãa ch·ªâ: ${key}` });
      }
    }

    // ---- build items t·ª´ DB & t√≠nh ti·ªÅn tr√™n server ----
    // shipping fee in minor unit (cents)
    const SHIPPING_FEE_MINOR = 200; // $2.00
    const CURRENCY = "usd";

    const populatedItems = [];
    let itemsTotalMinor = 0;

    for (const cartItem of items) {
      const { itemId, quantity } = cartItem || {};
      const qty = Number(quantity) || 0;
      if (!itemId || qty <= 0) continue;

      const food = await foodModel.findById(itemId);
      if (!food) {
        // N·∫øu 1 item kh√¥ng t·ªìn t·∫°i: c√≥ th·ªÉ b·ªè qua ho·∫∑c fail c·ª©ng.
        return res.status(400).json({
          success: false,
          message: `M√≥n ƒÉn kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a (id: ${itemId}).`,
        });
      }

      const priceMinor = Math.round(Number(food.price) * 100);
      itemsTotalMinor += priceMinor * qty;

      populatedItems.push({
        itemId: String(food._id),
        name: food.name,
        price: Number(food.price),
        quantity: qty,
        description: food.description || "",
        image: food.image || "",
      });
    }

    if (populatedItems.length === 0) {
      return res.status(400).json({ success: false, message: "Kh√¥ng c√≥ m√≥n h·ª£p l·ªá trong ƒë∆°n h√†ng." });
    }

    const serverTotalMinor = itemsTotalMinor + SHIPPING_FEE_MINOR;
    const serverTotal = serverTotalMinor / 100;

    // Option: c·∫£nh b√°o n·∫øu clientAmount kh√°c serverTotal (kh√¥ng b·∫Øt bu·ªôc)
    if (typeof clientAmount === "number" && Math.abs(Number(clientAmount) - serverTotal) > 0.01) {
      console.warn("‚ö†Ô∏è Client amount mismatch. client:", clientAmount, "server:", serverTotal);
      // v·∫´n d√πng serverTotal ƒë·ªÉ tr√°nh gian l·∫≠n
    }

    // ---- t·∫°o order (payment=false) ----
    const newOrder = new orderModel({
      userId,
      items: populatedItems,
      amount: serverTotal,
      address: cleanAddress,
      payment: false,
      status: "ƒêang x·ª≠ l√Ω m√≥n",
    });
    await newOrder.save();

    // clear cart c·ªßa user
    await userModel.findByIdAndUpdate(userId, { cartData: {} });

    // ---- Stripe line items (d√πng USD) ----
    const line_items = populatedItems.map((it) => ({
      price_data: {
        currency: CURRENCY,
        product_data: {
          name: it.name,
          description: it.description || "S·∫£n ph·∫©m",
        },
        unit_amount: Math.round(it.price * 100),
      },
      quantity: it.quantity,
    }));

    // ph√≠ giao h√†ng
    line_items.push({
      price_data: {
        currency: CURRENCY,
        product_data: { name: "Ph√≠ giao h√†ng" },
        unit_amount: SHIPPING_FEE_MINOR,
      },
      quantity: 1,
    });

    const session = await stripe.checkout.sessions.create({
      line_items,
      mode: "payment",
      success_url: `${FRONTEND_URL}/verify?success=true&orderId=${newOrder._id}`,
      cancel_url: `${FRONTEND_URL}/verify?success=false&orderId=${newOrder._id}`,
    });

    return res.json({
      success: true,
      session_url: session.url,
      orderId: newOrder._id,
    });
  } catch (err) {
    console.error("üí• placeOrder error:", err);
    return res.status(500).json({
      success: false,
      message: "ƒê√£ x·∫£y ra l·ªói server khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.",
      error: err.message,
    });
  }
};

/**
 * POST /api/order/verify
 * body: { orderId, success }
 */
export const verifyOrder = async (req, res) => {
  try {
    const { orderId, success } = req.body;
    if (!orderId) {
      return res.status(400).json({ success: false, message: "ID ƒë∆°n h√†ng l√† b·∫Øt bu·ªôc." });
    }

    const order = await orderModel.findById(orderId);
    if (!order) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng." });
    }

    if (isTrue(success)) {
      await orderModel.findByIdAndUpdate(orderId, { payment: true });
      return res.json({ success: true, message: "Thanh to√°n th√†nh c√¥ng." });
    } else {
      await orderModel.findByIdAndDelete(orderId);
      return res.json({ success: false, message: "Thanh to√°n th·∫•t b·∫°i, ƒë∆°n h√†ng ƒë√£ b·ªã h·ªßy." });
    }
  } catch (err) {
    console.error("üí• verifyOrder error:", err);
    return res.status(500).json({
      success: false,
      message: "ƒê√£ x·∫£y ra l·ªói server khi x√°c minh ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.",
      error: err.message,
    });
  }
};

/**
 * GET /api/order/userorders  (c·∫ßn auth)
 */
export const userOrders = async (req, res) => {
  try {
    const userId = req.userId;
    if (!userId) {
      return res.status(401).json({ success: false, message: "Unauthorized" });
    }
    const orders = await orderModel.find({ userId }).sort({ date: -1 }); // m·ªõi nh·∫•t tr∆∞·ªõc
    return res.json({ success: true, data: orders });
  } catch (err) {
    console.error("üí• userOrders error:", err);
    return res.status(500).json({
      success: false,
      message: "ƒê√£ x·∫£y ra l·ªói server khi t·∫£i ƒë∆°n h√†ng.",
      error: err.message,
    });
  }
};

/**
 * GET /api/order/list  (admin)
 */
export const listOrders = async (_req, res) => {
  try {
    const orders = await orderModel.find({}).sort({ date: -1 }); // m·ªõi nh·∫•t tr∆∞·ªõc
    return res.json({ success: true, data: orders });
  } catch (err) {
    console.error("üí• listOrders error:", err);
    return res.status(500).json({ success: false, message: "Error", error: err.message });
  }
};

/**
 * POST /api/order/status  (admin)
 * body: { orderId, status }
 */
export const updateStatus = async (req, res) => {
  try {
    const { orderId, status } = req.body || {};
    if (!orderId || !status) {
      return res.status(400).json({ success: false, message: "Thi·∫øu orderId ho·∫∑c status" });
    }
    await orderModel.findByIdAndUpdate(orderId, { status });
    return res.json({ success: true, message: "Status Updated" });
  } catch (err) {
    console.error("üí• updateStatus error:", err);
    return res.status(500).json({ success: false, message: "Error", error: err.message });
  }
};
